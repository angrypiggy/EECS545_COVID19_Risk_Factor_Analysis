# -*- coding: utf-8 -*-
"""SBERT.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/100H-NFbSOo04o6YEiDVbZExPCsoQobN0
"""

!pip install -U -q PyDrive

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth, drive
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

from google.colab import drive
drive.mount('/content/drive')

metadata_path = "/content/drive/My Drive/Colab Notebooks/EECS545_homeworks/FP/metadata.csv"

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/My Drive/Colab Notebooks/EECS545_homeworks/FP/

with open('all_data.txt', 'r') as f:
  lines = f.readlines()

pip install bertopic

pip install bertopic[visualization]

from bertopic import BERTopic

from sentence_transformers import SentenceTransformer

# Prepare embeddings
sentence_model = SentenceTransformer("distilbert-base-nli-mean-tokens", device='cuda')
embeddings = sentence_model.encode(lines[::20], show_progress_bar=True)

# Create topic model
model = BERTopic(verbose=True, calculate_probabilities=True)
topics, probabilities = model.fit_transform(lines[::20], embeddings)

num_clusters_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]
shrinking_value = 15
sil = []
sentence_model = SentenceTransformer("distilbert-base-nli-mean-tokens", device='cuda')
embeddings = sentence_model.encode(lines[::shrinking_value], show_progress_bar=True)

for num_clusters in num_clusters_list:
  # sentence_model = SentenceTransformer("distilbert-base-nli-mean-tokens", device='cuda')
  # embeddings = sentence_model.encode(lines[::shrinking_value], show_progress_bar=True)
  model = BERTopic(nr_topics=num_clusters)
  topics, probabilities = model.fit_transform(lines[::shrinking_value], embeddings)
  topics = np.array(topics)
  idx_valid = topics != -1
  # len(idx_valid)
  idx_valid.sum()
  sil.append(silhouette_score(embeddings[idx_valid], topics[idx_valid], metric = 'l2'))

plt.figure(figsize=(6,6))
plt.plot(num_clusters_list, sil, '-o')
plt.title('Title & Abstract')
plt.xlabel(r'Number of clusters k')
plt.ylabel('Sum of squared distance')

model.get_topic_freq()

model.get_topic(40)

model.visualize_topics()

import numpy as np
topics = np.array(topics)
idx_valid = topics != -1
# len(idx_valid)
idx_valid.sum()

from sklearn.metrics import silhouette_score
score = silhouette_score(embeddings[idx_valid], topics[idx_valid], metric = 'l2')
score

from sentence_transformers import SentenceTransformer

# Prepare embeddings
sentence_model = SentenceTransformer("distilbert-base-nli-mean-tokens", device='cuda')
embeddings = sentence_model.encode(lines[::10], show_progress_bar=True)

# Create topic model
model = BERTopic(nr_topics=3)
topics, probabilities = model.fit_transform(lines[::10], embeddings)

topics = np.array(topics)
idx_valid = topics != -1
# len(idx_valid)
idx_valid.sum()

score = silhouette_score(embeddings[idx_valid], topics[idx_valid], metric = 'l2')
score

from sentence_transformers import SentenceTransformer
import matplotlib.pyplot as plt
num_clusters_list = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]
shrinking_value = 15
sil = []
sentence_model = SentenceTransformer("distilbert-base-nli-mean-tokens", device='cuda')
embeddings = sentence_model.encode(lines[::shrinking_value], show_progress_bar=True)

for num_clusters in num_clusters_list:
  # sentence_model = SentenceTransformer("distilbert-base-nli-mean-tokens", device='cuda')
  # embeddings = sentence_model.encode(lines[::shrinking_value], show_progress_bar=True)
  model = BERTopic(nr_topics=num_clusters)
  topics, probabilities = model.fit_transform(lines[::shrinking_value], embeddings)
  topics = np.array(topics)
  idx_valid = topics != -1
  # len(idx_valid)
  idx_valid.sum()
  sil.append(silhouette_score(embeddings[idx_valid], topics[idx_valid], metric = 'l2'))

plt.figure(figsize=(6,6))
plt.plot(num_clusters_list, sil, '-o')
plt.title('Title & Abstract')
plt.xlabel(r'Number of clusters k')
plt.ylabel('Sum of squared distance')
